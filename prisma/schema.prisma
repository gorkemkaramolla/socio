// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String?
  name     String?
  image    Bytes?
  username String? @unique() @default(nanoid()) @db.VarChar(21)

  imageUri          String?
  location          String?
  bio               String?   @db.VarChar(500)
  created_at        DateTime  @default(now())
  messages_sent     Message[] @relation("sender_id")
  messages_received Message[] @relation("receiver_id")

  posts       Post[]
  Comment     Comment[]
  Reaction    Reaction[]
  PostLike    PostLike[]
  CommentLike CommentLike[]
}

model Message {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("sender_id", fields: [sender_id], references: [id])
  sender_id   Int
  receiver    User     @relation("receiver_id", fields: [receiver_id], references: [id])
  receiver_id Int
  message     String
  created_at  DateTime @default(now())

  @@index([sender_id])
  @@index([receiver_id])
}

model Post {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @default(now())
  title      String
  content    String?    @db.VarChar(1000)
  published  Boolean    @default(false)
  user       User       @relation(fields: [user_id], references: [id])
  user_id    Int
  Comment    Comment[]
  Reaction   Reaction[]
  PostLike   PostLike[]
}

model Reaction {
  id          Int       @id @default(autoincrement())
  reactions   String
  created_at  DateTime  @default(now())
  modified_at DateTime?
  post_id     Int       @unique
  user_id     Int       @unique
  user        User      @relation(fields: [user_id], references: [id])
  post        Post      @relation(fields: [post_id], references: [id])
}

model PostLike {
  id         Int      @id @default(autoincrement())
  reactions  String
  created_at DateTime @default(now())
  liked      Boolean  @default(true)
  post_id    Int
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  post       Post     @relation(fields: [post_id], references: [id])
}

model CommentLike {
  id         Int      @id @default(autoincrement())
  reactions  String
  created_at DateTime @default(now())
  liked      Boolean  @default(false)
  comment_id Int
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  comment    Comment  @relation(fields: [comment_id], references: [id])
}

model Comment {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now())
  content     String?
  post_id     Int
  user_id     Int
  post        Post          @relation(fields: [post_id], references: [id])
  user        User          @relation(fields: [user_id], references: [id])
  CommentLike CommentLike[]
}

model ActiveChats {
  id Int @id @default(autoincrement())
}
